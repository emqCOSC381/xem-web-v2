import { Environment } from './types';
export declare const generateToken: (
  environment: Environment,
  consumerKey: string,
  consumerSecret: string
) => Promise<any>;
export declare const mpesaExpressRequest: (
  environment: Environment,
  accessToken: string,
  BusinessShortCode: number,
  Password: string,
  Timestamp: string,
  TransactionType: 'CustomerPayBillOnline' | 'CustomerBuyGoodsOnline',
  Amount: number,
  PartyA: number,
  PartyB: number,
  PhoneNumber: number,
  CallBackURL: string,
  AccountReference: string,
  TransactionDesc: string
) => Promise<any>;
export declare const mpesaExpressQuery: (
  environment: Environment,
  accessToken: string,
  BusinessShortCode: number,
  Password: string,
  Timestamp: string,
  CheckoutRequestID: string
) => Promise<any>;
export declare const c2bRegisterUrl: (
  environment: Environment,
  accessToken: string,
  ValidationURL: string,
  ConfirmationURL: string,
  ResponseType: 'Canceled' | 'Completed',
  ShortCode: number
) => Promise<any>;
export declare const c2bSimulateTransaction: (
  accessToken: string,
  CommandID: string,
  Amount: number,
  Msisdn: number,
  BillRefNumber: string,
  ShortCode: number
) => Promise<any>;
export declare const b2cPaymentRequest: (
  environment: Environment,
  accessToken: string,
  InitiatorName: string,
  SecurityCredential: string,
  CommandID: 'SalaryPayment' | 'BusinessPayment' | 'PromotionPayment',
  Amount: number,
  PartyA: number,
  PartyB: number,
  Remarks: string,
  QueueTimeOutURL: string,
  ResultURL: string,
  Occassion: string
) => Promise<any>;
export declare const accountBalanceRequest: (
  environment: Environment,
  accessToken: string,
  CommandID: 'AccountBalance',
  PartyA: number,
  IdentifierType: 2 | 4 | 1,
  Remarks: string,
  Initiator: string,
  SecurityCredential: string,
  QueueTimeOutURL: string,
  ResultURL: string
) => Promise<any>;
export declare const transactionStatusRequest: (
  environment: Environment,
  accessToken: string,
  CommandID: 'TransactionStatusQuery',
  PartyA: number,
  IdentifierType: 2 | 4 | 1,
  Remarks: string,
  Initiator: string,
  SecurityCredential: string,
  QueueTimeOutURL: string,
  ResultURL: string,
  TransactionID: string,
  Occasion: string
) => Promise<any>;
export declare const reversalRequest: (
  environment: Environment,
  accessToken: string,
  CommandID: 'TransactionReversal',
  ReceiverParty: number,
  ReceiverIdentifierType: 11,
  Remarks: string,
  Initiator: string,
  SecurityCredential: string,
  QueueTimeOutURL: string,
  ResultURL: string,
  TransactionID: string,
  Occasion: string
) => Promise<any>;
export declare const getEnvPath: (
  environment: Environment
) => 'sandbox' | 'api';
